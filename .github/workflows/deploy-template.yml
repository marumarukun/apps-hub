# GitHub Actions Workflow Template for CloudRun Deployment
# 
# To use this template:
# 1. Copy this file to {app-name}.yml
# 2. Replace all instances of {APP_NAME} with your actual app name
# 3. Replace all instances of {APP_DIRECTORY} with your app directory name
# 4. Adjust resource settings (CPU, memory, etc.) as needed

name: Deploy {APP_NAME} to Cloud Run

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App name for Cloud Run service'
        required: true
        default: '{APP_NAME}'

env:
  IMAGE_NAME: asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-images/${{ inputs.app_name }}
  WORKLOAD_IDENTITY_PROVIDER: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github
  REGION: asia-northeast1
  PORT: 8080
  APP_DIRECTORY: "{APP_DIRECTORY}"

permissions:
  id-token: write
  contents: read

jobs:
  Build-and-Push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Configure Docker
        run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev
      - name: Build Docker image
        run: |
          cd ${{ env.APP_DIRECTORY }}
          docker build --platform linux/amd64 -t ${{ env.IMAGE_NAME }}:latest -f Dockerfile .
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_NAME }}:latest

  Deploy-App:
    needs: Build-and-Push-image
    runs-on: ubuntu-latest
    env:
      CLOUD_LOGGING: true
      SECURITY_POLICY: apps-hub-ip-policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Update Cloud Armor IP Rules
        run: |
          chmod +x scripts/manage-armor-policy.sh
          ./scripts/manage-armor-policy.sh update "${{ vars.ALLOWED_IP_ADDRESSES }}"
      
      - name: Deploy Cloud Run
        run: |
          gcloud run deploy ${{ inputs.app_name }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --region=${{ env.REGION }} \
          --platform managed \
          --min-instances=0 \
          --max-instances=1 \
          --no-cpu-throttling  \
          --cpu=1 \
          --concurrency=10 \
          --memory=512Mi \
          --quiet \
          --port ${{ env.PORT }} \
          --ingress=internal-and-cloud-load-balancing \
          --set-env-vars=PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}",CLOUD_LOGGING="${{ env.CLOUD_LOGGING }}"
      
      - name: Setup Load Balancer
        run: |
          APP_SERVICE_NAME="${{ inputs.app_name }}"
          NEG_NAME="${APP_SERVICE_NAME}-neg"
          BACKEND_SERVICE_NAME="${APP_SERVICE_NAME}-backend"
          URL_MAP_NAME="${APP_SERVICE_NAME}-url-map"
          TARGET_PROXY_NAME="${APP_SERVICE_NAME}-proxy"
          FORWARDING_RULE_NAME="${APP_SERVICE_NAME}-forwarding-rule"
          
          # Wait for Cloud Run service to be ready with retry logic
          echo "Waiting for Cloud Run service to be fully ready..."
          for i in {1..12}; do
            STATUS=$(gcloud run services describe ${APP_SERVICE_NAME} --region=${{ env.REGION }} --format="value(status.conditions[0].status)" 2>/dev/null || echo "Unknown")
            echo "Attempt $i: Cloud Run status is $STATUS"
            
            if [ "$STATUS" = "True" ]; then
              echo "Cloud Run service is ready!"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "Error: Cloud Run service not ready after 6 minutes"
              exit 1
            fi
            
            echo "Waiting 30 seconds before next check..."
            sleep 30
          done
          
          # Create Network Endpoint Group for Cloud Run
          gcloud compute network-endpoint-groups create ${NEG_NAME} \
            --region=${{ env.REGION }} \
            --network-endpoint-type=serverless \
            --cloud-run-service=${APP_SERVICE_NAME} \
            --quiet || echo "NEG already exists"
          
          # Create Backend Service
          gcloud compute backend-services create ${BACKEND_SERVICE_NAME} \
            --global \
            --load-balancing-scheme=EXTERNAL_MANAGED \
            --protocol=HTTP \
            --quiet || echo "Backend service already exists"
          
          # Add NEG to Backend Service
          gcloud compute backend-services add-backend ${BACKEND_SERVICE_NAME} \
            --global \
            --network-endpoint-group=${NEG_NAME} \
            --network-endpoint-group-region=${{ env.REGION }} \
            --quiet || echo "Backend already added"
          
          # Attach Security Policy to Backend Service
          gcloud compute backend-services update ${BACKEND_SERVICE_NAME} \
            --global \
            --security-policy=${{ env.SECURITY_POLICY }} \
            --quiet
          
          # Create URL Map
          gcloud compute url-maps create ${URL_MAP_NAME} \
            --default-service=${BACKEND_SERVICE_NAME} \
            --global \
            --quiet || echo "URL map already exists"
          
          # Create HTTP Target Proxy
          gcloud compute target-http-proxies create ${TARGET_PROXY_NAME} \
            --url-map=${URL_MAP_NAME} \
            --global \
            --quiet || echo "Target proxy already exists"
          
          # Create Global Forwarding Rule
          gcloud compute forwarding-rules create ${FORWARDING_RULE_NAME} \
            --global \
            --target-http-proxy=${TARGET_PROXY_NAME} \
            --ports=80 \
            --load-balancing-scheme=EXTERNAL_MANAGED \
            --quiet || echo "Forwarding rule already exists"
          
          # Get Load Balancer IP
          LB_IP=$(gcloud compute forwarding-rules describe ${FORWARDING_RULE_NAME} --global --format="value(IPAddress)")
          echo "Load Balancer IP: ${LB_IP}"
          echo "App URL: http://${LB_IP}"