# GitHub Actions Workflow Template for CloudRun Deployment
# 
# To use this template:
# 1. Copy this file to {app-name}.yml
# 2. Replace all instances of {APP_NAME} with your actual app name
# 3. Replace all instances of {APP_DIRECTORY} with your app directory name
# 4. Adjust resource settings (CPU, memory, etc.) as needed

name: Deploy/Delete gradio-whisper-gpu to/from Cloud Run

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - delete
      app_name:
        description: 'App name for Cloud Run service'
        required: true
        default: 'gradio-whisper-gpu'

env:
  IMAGE_NAME: asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-images/${{ inputs.app_name }}
  WORKLOAD_IDENTITY_PROVIDER: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github
  # GPU„Çí‰Ωø„ÅÜ„Åü„ÇÅ„Å´„Ç∑„É≥„Ç¨„Éù„Éº„É´„É™„Éº„Ç∏„Éß„É≥„ÇíÊåáÂÆö
  REGION: asia-southeast1
  PORT: 8080
  APP_DIRECTORY: "gradio-whisper-gpu"

permissions:
  id-token: write
  contents: read

jobs:
  Build-and-Push-image:
    if: inputs.action == 'deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Configure Docker
        run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev
      - name: Build Docker image
        run: |
          cd ${{ env.APP_DIRECTORY }}
          docker build --platform linux/amd64 -t ${{ env.IMAGE_NAME }}:latest -f Dockerfile .
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_NAME }}:latest

  Deploy-App:
    if: inputs.action == 'deploy'
    needs: Build-and-Push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Deploy Cloud Run
        run: |
          gcloud run deploy ${{ inputs.app_name }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --region=${{ env.REGION }} \
          --platform managed \
          --min-instances=0 \
          --max-instances=1 \
          --cpu=4 `# GPU„Çí‰Ωø„ÅÜ„Åü„ÇÅ„Å´CPU„Çí4ÂÄã„Å´Â¢ó„ÇÑ„Åô`\
          --concurrency=80 \
          --memory=16Gi `# GPU„Çí‰Ωø„ÅÜ„Åü„ÇÅ„Å´„É°„É¢„É™„Çí16GB„Å´Â¢ó„ÇÑ„Åô(ÊúÄ‰Ωé16GB„ÅåÂøÖË¶Å)`\
          --timeout=900 \
          --quiet \
          --port ${{ env.PORT }} \
          --ingress=internal-and-cloud-load-balancing \
          --allow-unauthenticated \
          --gpu 1 `# GPU„Çí‰Ωø„ÅÜ„Åü„ÇÅ„Å´GPU„Çí1ÂÄãÊåáÂÆö` \
          --no-gpu-zonal-redundancy `# GPU„ÅÆ„Çæ„Éº„É≥ÂÜóÈï∑„ÇíÁÑ°Âäπ„Å´„Åô„ÇãÔºàÊúâÂäπ„Å´„Åô„Çã„Å´„ÅØÁî≥Ë´ã„ÅåÂøÖË¶ÅÔºâ`
      
      - name: Create Terraform State Bucket (if not exists)
        run: |
          TF_STATE_BUCKET="${{ secrets.GCP_PROJECT_ID }}-terraform-state"
          # Check if bucket exists, create if not
          if ! gsutil ls gs://$TF_STATE_BUCKET > /dev/null 2>&1; then
            echo "Creating Terraform state bucket: gs://$TF_STATE_BUCKET"
            gsutil mb gs://$TF_STATE_BUCKET
            gsutil versioning set on gs://$TF_STATE_BUCKET
            echo "Bucket created successfully"
          else
            echo "Terraform state bucket already exists: gs://$TF_STATE_BUCKET"
          fi
          
      - name: Setup App Infrastructure with Terraform
        working-directory: terraform/app-infrastructure
        run: |
          TF_STATE_BUCKET="${{ secrets.GCP_PROJECT_ID }}-terraform-state"
          
          # Initialize Terraform with dynamic backend config for this app
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="prefix=apps-hub/app/${{ inputs.app_name }}"
          
          # Create terraform.tfvars with runtime values
          cat > terraform.tfvars << EOF
          project_id = "${{ secrets.GCP_PROJECT_ID }}"
          app_name   = "${{ inputs.app_name }}"
          region     = "${{ env.REGION }}"
          EOF
          
          # Wait for Cloud Run to be ready
          echo "Waiting for Cloud Run service to be ready..."
          for i in {1..12}; do
            STATUS=$(gcloud run services describe ${{ inputs.app_name }} --region=${{ env.REGION }} --format="value(status.conditions[0].status)" 2>/dev/null || echo "Unknown")
            echo "Attempt $i: Cloud Run status is $STATUS"
            
            if [ "$STATUS" = "True" ]; then
              echo "Cloud Run service is ready!"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "Error: Cloud Run service not ready after 6 minutes"
              exit 1
            fi
            
            echo "Waiting 30 seconds before next check..."
            sleep 30
          done
          
          # Plan and Apply Terraform
          echo "=== Terraform Plan ==="
          terraform plan
          echo "=== Applying Terraform Changes ==="
          terraform apply -auto-approve
          
          # Output results
          echo "üéâ App Deployment completed!"
          echo "Load Balancer IP: $(terraform output -raw load_balancer_ip)"
          echo "App URL: $(terraform output -raw app_url)"
          echo "Security Policy: $(terraform output -raw security_policy_attached)"

  Delete-App:
    if: inputs.action == 'delete'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Destroy App Infrastructure with Terraform
        working-directory: terraform/app-infrastructure
        run: |
          TF_STATE_BUCKET="${{ secrets.GCP_PROJECT_ID }}-terraform-state"
          
          # Check if Terraform state exists for this app
          if ! gsutil ls gs://$TF_STATE_BUCKET/apps-hub/app/${{ inputs.app_name }}/ > /dev/null 2>&1; then
            echo "‚ö†Ô∏è No Terraform state found for ${{ inputs.app_name }}. Infrastructure may not exist or already deleted."
          else
            echo "üîç Found Terraform state for ${{ inputs.app_name }}. Proceeding with infrastructure destruction..."
            
            # Initialize Terraform with dynamic backend config for this app
            terraform init \
              -backend-config="bucket=$TF_STATE_BUCKET" \
              -backend-config="prefix=apps-hub/app/${{ inputs.app_name }}"
            
            # Create terraform.tfvars with runtime values
            cat > terraform.tfvars << EOF
          project_id = "${{ secrets.GCP_PROJECT_ID }}"
          app_name   = "${{ inputs.app_name }}"
          region     = "${{ env.REGION }}"
          EOF
            
            # Show what will be destroyed
            echo "=== Terraform Plan (Destroy) ==="
            terraform plan -destroy || echo "‚ö†Ô∏è Plan failed, but continuing with destroy..."
            
            # Destroy infrastructure
            echo "=== Destroying Terraform Infrastructure ==="
            terraform destroy -auto-approve || echo "‚ö†Ô∏è Some resources may have failed to destroy, but continuing..."
            
            echo "‚úÖ Infrastructure destruction completed!"
          fi
      
      - name: Delete Cloud Run Service
        run: |
          # Check if Cloud Run service exists
          if gcloud run services describe ${{ inputs.app_name }} --region=${{ env.REGION }} --format="value(metadata.name)" > /dev/null 2>&1; then
            echo "üîç Found Cloud Run service: ${{ inputs.app_name }}. Deleting..."
            gcloud run services delete ${{ inputs.app_name }} \
              --region=${{ env.REGION }} \
              --quiet
            echo "‚úÖ Cloud Run service deleted successfully!"
          else
            echo "‚ö†Ô∏è Cloud Run service ${{ inputs.app_name }} not found. May have been already deleted."
          fi
      
      - name: Delete Docker Images (Optional)
        run: |
          # List and delete Docker images for this app
          echo "üîç Checking for Docker images to delete..."
          
          # Get list of images for this app
          IMAGES=$(gcloud artifacts docker images list asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-images/${{ inputs.app_name }} --format="value(IMAGE)" 2>/dev/null || echo "")
          
          if [ -z "$IMAGES" ]; then
            echo "‚ö†Ô∏è No Docker images found for ${{ inputs.app_name }}"
          else
            echo "üóëÔ∏è Found Docker images. Deleting..."
            echo "$IMAGES" | while read -r image; do
              if [ -n "$image" ]; then
                echo "Deleting image: $image"
                gcloud artifacts docker images delete "$image" --quiet || echo "‚ö†Ô∏è Failed to delete $image, but continuing..."
              fi
            done
            echo "‚úÖ Docker images cleanup completed!"
          fi
      
      - name: Clean up Terraform State (Optional)
        run: |
          TF_STATE_BUCKET="${{ secrets.GCP_PROJECT_ID }}-terraform-state"
          STATE_PREFIX="apps-hub/app/${{ inputs.app_name }}"
          
          echo "üßπ Cleaning up Terraform state files..."
          
          # List state files
          STATE_FILES=$(gsutil ls gs://$TF_STATE_BUCKET/$STATE_PREFIX/ 2>/dev/null || echo "")
          
          if [ -z "$STATE_FILES" ]; then
            echo "‚ö†Ô∏è No state files found to clean up"
          else
            echo "üóëÔ∏è Removing Terraform state files..."
            gsutil -m rm -r gs://$TF_STATE_BUCKET/$STATE_PREFIX/ || echo "‚ö†Ô∏è Some state files may not have been deleted"
            echo "‚úÖ Terraform state cleanup completed!"
          fi
          
          echo ""
          echo "üéâ Complete deletion of ${{ inputs.app_name }} finished!"
          echo "üìã Summary:"
          echo "   ‚úÖ Load Balancer and related infrastructure destroyed"
          echo "   ‚úÖ Cloud Run service deleted"
          echo "   ‚úÖ Docker images removed"
          echo "   ‚úÖ Terraform state cleaned up"
          echo ""
          echo "üí° You can now re-deploy this app by running this workflow with 'deploy' action."
